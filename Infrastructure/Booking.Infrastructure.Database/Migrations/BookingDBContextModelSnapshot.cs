// <auto-generated />
using System;
using Booking.Infrastructure.Database;
using GeoAPI.Geometries;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Booking.Infrastructure.Database.Migrations
{
    [DbContext(typeof(BookingDBContext))]
    partial class BookingDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Booking.Core.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("Country");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnName("Postcode");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("Street");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("AppointmentExternalId")
                        .HasColumnName("AppointmentExternalId");

                    b.Property<int>("AppointmentStatus")
                        .HasColumnName("AppointmentStatusId");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnName("AppointmentTime");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("PayPalApprovalLink");

                    b.Property<decimal>("PricePerSession")
                        .HasColumnName("PricePerSession")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("PricePerSessionDiscount")
                        .HasColumnName("PricePerSessionDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("ReservationId")
                        .HasColumnName("ReservationId");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnName("ContentType");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnName("Data");

                    b.Property<int>("DocumentType")
                        .HasColumnName("DocumentTypeId");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("FileName");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long?>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("ReceiverId")
                        .HasColumnName("ReceiverId");

                    b.Property<long>("SenderId")
                        .HasColumnName("SenderId");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChatId")
                        .HasColumnName("ChatId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("Content")
                        .HasMaxLength(5000);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsRead")
                        .HasColumnName("IsRead");

                    b.Property<bool>("IsSend")
                        .HasColumnName("IsSend");

                    b.Property<DateTime>("MessageSentAt")
                        .HasColumnName("MessageSentAt");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnName("ReceiverName");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnName("SenderName");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Connection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ConnectionStatus")
                        .HasColumnName("ConnectionStatusId");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("CustomerSentRequest")
                        .HasColumnName("CustomerSentRequest");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("ProviderId")
                        .HasColumnName("ProviderId");

                    b.Property<bool>("ProviderSentRequest")
                        .HasColumnName("ProviderSentRequest");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.HubConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionId")
                        .IsRequired()
                        .HasColumnName("ConnectionId")
                        .HasMaxLength(256);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("HubConnections");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Invite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("FriendNumber")
                        .IsRequired()
                        .HasColumnName("FriendNumber");

                    b.Property<long>("InviterId")
                        .HasColumnName("InviterId");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("VoucherCodeSent")
                        .HasColumnName("VoucherCodeSent");

                    b.HasKey("Id");

                    b.HasIndex("InviterId");

                    b.ToTable("Invites");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<IPoint>("GeoLocation")
                        .IsRequired()
                        .HasColumnName("GeoLocation");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name");

                    b.Property<long>("ProviderId")
                        .HasColumnName("ProviderId");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("Content");

                    b.Property<long?>("ConnectionId")
                        .HasColumnName("ConnectionId");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("NotificationSentAt")
                        .HasColumnName("NotificationSentAt");

                    b.Property<int>("NotificationStatus")
                        .HasColumnName("NotificationStatusId");

                    b.Property<int>("NotificationType")
                        .HasColumnName("NotificationTypeId");

                    b.Property<long>("ReceiverId")
                        .HasColumnName("ReceiverId");

                    b.Property<long?>("ReservationId")
                        .HasColumnName("ReservationId");

                    b.Property<long>("SenderId")
                        .HasColumnName("SenderId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasMaxLength(5000);

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.NotificationSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutomaticBookingConfirmation")
                        .HasColumnName("AutomaticBookingConfirmation");

                    b.Property<bool>("BookingConfirmations")
                        .HasColumnName("BookingConfirmations");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("NewBookings")
                        .HasColumnName("NewBookings");

                    b.Property<int>("NotificationSettingsType")
                        .HasColumnName("NotificationSettingsTypeId");

                    b.Property<bool>("PrivateMessages")
                        .HasColumnName("PrivateMessages");

                    b.Property<bool>("RecommendationRequestFromFriends")
                        .HasColumnName("RecommendationRequestFromFriends");

                    b.Property<long?>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description");

                    b.Property<float?>("FiveSessionsDiscount")
                        .HasColumnName("FiveSessionsDiscount");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int?>("NumberOfParticipants")
                        .HasColumnName("NumberOfParticipants");

                    b.Property<decimal>("PricePerSession")
                        .HasColumnName("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProfessionType")
                        .HasColumnName("ProfessionTypeId");

                    b.Property<string>("ProviderStrypeId");

                    b.Property<int>("ServiceType")
                        .HasColumnName("ServiceTypeId");

                    b.Property<float?>("TenSessionsDiscount")
                        .HasColumnName("TenSessionsDiscount");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.ProviderSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnName("SkillName");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ProviderSkills");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("Role");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("Token");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Reminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Booking15MinutesBefore")
                        .HasColumnName("Booking15MinutesBefore");

                    b.Property<bool>("Booking1HourBefore")
                        .HasColumnName("Booking1HourBefore");

                    b.Property<bool>("Booking24HoursBefore")
                        .HasColumnName("Booking24HoursBefore");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("CustomerId")
                        .HasColumnName("CustomerId");

                    b.Property<float?>("FiveSessionsDiscount")
                        .HasColumnName("FiveSessionsDiscount");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("PayPerSession")
                        .HasColumnName("PayPerSession");

                    b.Property<bool>("PayTotal")
                        .HasColumnName("PayTotal");

                    b.Property<int>("PaymentProvider")
                        .HasColumnName("PaymentProviderId");

                    b.Property<long>("ProviderId")
                        .HasColumnName("ProviderId");

                    b.Property<Guid>("ReservationPaymentId")
                        .HasColumnName("ReservationPaymentId");

                    b.Property<int>("ReservationStatus")
                        .HasColumnName("ReservationStatusId");

                    b.Property<float?>("TenSessionsDiscount")
                        .HasColumnName("TenSessionsDiscount");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnName("TotalPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalPriceDiscount")
                        .HasColumnName("TotalPriceDiscount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("VoucherCode")
                        .HasColumnName("VoucherCode");

                    b.Property<float?>("VoucherCodeDiscount")
                        .HasColumnName("VoucherCodeDiscount");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Review", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("Comment")
                        .HasMaxLength(1000);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<decimal>("Grade")
                        .HasColumnName("Grade")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<DateTime>("PostDate")
                        .HasColumnName("PostDate");

                    b.Property<long>("RatedUserId")
                        .HasColumnName("RatedUserId");

                    b.Property<long>("ReviewerId")
                        .HasColumnName("ReviewerId");

                    b.HasKey("Id");

                    b.HasIndex("RatedUserId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.ScheduleSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<int>("DurationOfSessionInMinutes")
                        .HasColumnName("DurationOfSessionInMinutes");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("EndDate");

                    b.Property<int>("GapBetweenSessionsInMinutes")
                        .HasColumnName("GapBetweenSessionsInMinutes");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("ProviderId")
                        .HasColumnName("ProviderId");

                    b.Property<string>("ScheduledDaysOfWeek");

                    b.Property<string>("ScheduledTimeSlots")
                        .HasColumnName("ScheduledTimeSlots");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("StartDate");

                    b.Property<string>("WorkingHoursEnd")
                        .HasColumnName("WorkingHoursEnd");

                    b.Property<string>("WorkingHoursStart")
                        .HasColumnName("WorkingHoursStart");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId")
                        .IsUnique();

                    b.ToTable("ScheduleSettings");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .HasColumnName("Biography")
                        .HasMaxLength(5000);

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Deleted")
                        .HasColumnName("Deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email");

                    b.Property<string>("FcmTokenDeviceId")
                        .IsRequired()
                        .HasColumnName("FcmTokenDeviceId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("Role");

                    b.Property<int>("UserType")
                        .HasColumnName("UserTypeId");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.VoucherCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("Code");

                    b.Property<string>("CreatedBy")
                        .HasColumnName("CreatedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsUsed")
                        .HasColumnName("IsUsed");

                    b.Property<string>("ModifiedBy")
                        .HasColumnName("ModifiedBy")
                        .HasMaxLength(256);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ModifiedDateUtc")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("VoucherCodes");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Address", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("Booking.Core.Domain.Entities.Address", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.Reservation", "Reservation")
                        .WithMany("Appointments")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithMany("Attachments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Chat", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Booking.Core.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.Chat", "Chat")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Connection", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Booking.Core.Domain.Entities.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.HubConnection", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Invite", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "Inviter")
                        .WithMany()
                        .HasForeignKey("InviterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Location", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.Provider", "Provider")
                        .WithOne("Location")
                        .HasForeignKey("Booking.Core.Domain.Entities.Location", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Notification", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Booking.Core.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.NotificationSettings", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithOne("NotificationSettings")
                        .HasForeignKey("Booking.Core.Domain.Entities.NotificationSettings", "UserId");
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Provider", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithMany("Providers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.ProviderSkill", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithMany("ProviderSkills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithOne("Reminder")
                        .HasForeignKey("Booking.Core.Domain.Entities.Reminder", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Reservation", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Booking.Core.Domain.Entities.Provider", "Provider")
                        .WithMany("Reservations")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.Review", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "RatedUser")
                        .WithMany()
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Booking.Core.Domain.Entities.User", "ReviewerUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.ScheduleSettings", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.Provider", "Provider")
                        .WithOne("ScheduleSettings")
                        .HasForeignKey("Booking.Core.Domain.Entities.ScheduleSettings", "ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Booking.Core.Domain.Entities.VoucherCode", b =>
                {
                    b.HasOne("Booking.Core.Domain.Entities.User", "User")
                        .WithOne("VoucherCode")
                        .HasForeignKey("Booking.Core.Domain.Entities.VoucherCode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
